{"version":3,"sources":["../../../api/server/admin/index.js"],"names":["app","use","req","res","next","token","headers","authorization","jwt","verify","encrypText","err","decoded","console","log","json","type","message","Helpers","isAdmin","roleId","userIsRemoved","id","isRemoved","adminRoutes"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,GAAG,GAAG,0BAAZ;AAEAA,GAAG,CAACC,GAAJ,CAAQ,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B,MAAMC,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAYC,aAA1B;;AACAC,2BAAIC,MAAJ,CAAWJ,KAAX,EAAkBK,oBAAlB;AAAA,6FAA8B,iBAAOC,GAAP,EAAYC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5BC,cAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;;AACA,kBAAI,CAACA,OAAD,IAAYD,GAAhB,EAAqB;AACnBR,gBAAAA,GAAG,CAACY,IAAJ,CAAS;AAAEC,kBAAAA,IAAI,EAAE,KAAR;AAAeC,kBAAAA,OAAO,EAAE;AAAxB,iBAAT;AACD;;AACDJ,cAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AAL4B;AAAA,qBAMNM,oBAAQC,OAAR,CAAgBP,OAAO,CAACQ,MAAxB,CANM;;AAAA;AAMtBD,cAAAA,OANsB;AAAA;AAAA,qBAOJD,oBAAQG,aAAR,CAAsBT,OAAO,CAACU,EAA9B,CAPI;;AAAA;AAOtBC,cAAAA,SAPsB;;AAS5B,kBAAIA,SAAS,KAAK,CAAlB,EAAqB;AACnBpB,gBAAAA,GAAG,CAACY,IAAJ,CAAS;AAAEC,kBAAAA,IAAI,EAAE,KAAR;AAAeC,kBAAAA,OAAO,EAAE;AAAxB,iBAAT;AACD;;AAED,kBAAIE,OAAO,KAAK,CAAhB,EAAmB;AACjBhB,gBAAAA,GAAG,CAACY,IAAJ,CAAS;AAAEC,kBAAAA,IAAI,EAAE,KAAR;AAAeC,kBAAAA,OAAO,EAAE;AAAxB,iBAAT;AACD;;AAEDb,cAAAA,IAAI;;AAjBwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA9B;;AAAA;AAAA;AAAA;AAAA;AAmBD,CArBD;AAuBAJ,GAAG,CAACC,GAAJ,CAAQuB,sBAAR;eAEexB,G","sourcesContent":["import express from \"express\"\nimport jwt from \"jsonwebtoken\"\nimport bcrypt from \"bcrypt\"\nimport { encrypText } from \"../../server/src/config/settings\"\nimport Helpers from \"../utils/helpers\"\nimport adminRoutes from \"../admin/routes/AdminRoute\"\n\nconst app = express()\n\napp.use((req, res, next) => {\n  const token = req.headers.authorization\n  jwt.verify(token, encrypText, async (err, decoded) => {\n    console.log(decoded)\n    if (!decoded || err) {\n      res.json({ type: false, message: \"Your access is denied\" })\n    }\n    console.log(decoded)\n    const isAdmin = await Helpers.isAdmin(decoded.roleId)\n    const isRemoved = await Helpers.userIsRemoved(decoded.id)\n\n    if (isRemoved === 1) {\n      res.json({ type: false, message: \"Your account is not active\" })\n    }\n\n    if (isAdmin === 0) {\n      res.json({ type: false, message: \"Permission denied\" })\n    }\n\n    next()\n  })\n})\n\napp.use(adminRoutes)\n\nexport default app\n"],"file":"index.js"}