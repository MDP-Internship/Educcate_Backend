{"version":3,"sources":["../../../api/server/controllers/LoginController.js"],"names":["util","Util","LoginController","req","res","console","log","body","name","surname","email","cryptedPassword","password","roleId","reqFullBody","isRegisterValidateResult","bcrypt","hash","LoginService","register","userRes","json","_previousDataValues","status","error","isLoginValidateResult","login","compare","token","jwt","sign","id","expiresIn"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,IAAI,GAAG,IAAIC,gBAAJ,EAAb;;IAEMC,e;;;;;;;;qHACkBC,G,EAAKC,G;;;;;;;AACzBC,gBAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,IAAhB;4BACoEJ,GAAG,CAACI,I,EAAhEC,I,aAAAA,I,EAAMC,O,aAAAA,O,EAASC,K,aAAAA,K,EAAiBC,e,aAAVC,Q,EAA2BC,M,aAAAA,M;AACnDC,gBAAAA,W,GAAcX,GAAG,CAACI,I;AAClBQ,gBAAAA,wB,GAA2B,gCAAiBD,WAAjB,C;;qBAE7BC,wBAAwB,CAACX,G;;;;;;uBACJY,mBAAOC,IAAP,CAAYN,eAAZ,EAA6B,EAA7B,C;;;AAAjBC,gBAAAA,Q;;;uBAEkBM,yBAAaC,QAAb,CACpBX,IADoB,EAEpBC,OAFoB,EAGpBC,KAHoB,EAIpBE,QAJoB,EAKpBC,MALoB,C;;;AAAhBO,gBAAAA,O;AAQNhB,gBAAAA,GAAG,CAACiB,IAAJ,CAASD,OAAO,CAACE,mBAAjB;;;;;;;AAEAjB,gBAAAA,OAAO,CAACC,GAAR;iDACOF,GAAG,CAACiB,IAAJ,CAAS;AAAEE,kBAAAA,MAAM,EAAE;AAAV,iBAAT,C;;;AAGXnB,gBAAAA,GAAG,CAACiB,IAAJ,CAASN,wBAAwB,CAACS,KAAlC;;;;;;;;;;;;;;;;;;;mHAGiBrB,G,EAAKC,G;;;;;;;6BACMD,GAAG,CAACI,I,EAAxBG,K,cAAAA,K,EAAOE,Q,cAAAA,Q;AACTE,gBAAAA,W,GAAcX,GAAG,CAACI,I;AAClBkB,gBAAAA,qB,GAAwB,6BAAcX,WAAd,C;AAC9BT,gBAAAA,OAAO,CAACC,GAAR,CAAYmB,qBAAqB,CAACrB,GAAlC;;qBACIqB,qBAAqB,CAACrB,G;;;;;;uBACFc,yBAAaQ,KAAb,CAAmBhB,KAAnB,C;;;AAAhBU,gBAAAA,O;;oBAEDA,O;;;;;kDACIhB,GAAG,CAACiB,IAAJ,CAAS;AAAEE,kBAAAA,MAAM,EAAE,OAAV;AAAmBC,kBAAAA,KAAK,EAAE;AAA1B,iBAAT,C;;;;uBAECR,mBAAOW,OAAP,CAAef,QAAf,EAAyBQ,OAAO,CAACR,QAAjC,C;;;;;;;;AACFgB,gBAAAA,K,GAAQC,yBAAIC,IAAJ,CACZ;AACEC,kBAAAA,EAAE,EAAEX,OAAO,CAACW,EADd;AAEEvB,kBAAAA,IAAI,EAAEY,OAAO,CAACZ,IAFhB;AAGEE,kBAAAA,KAAK,EAAEU,OAAO,CAACV,KAHjB;AAIEG,kBAAAA,MAAM,EAAEO,OAAO,CAACP;AAJlB,iBADY,EAOZ,YAPY,EAQZ;AAAEmB,kBAAAA,SAAS,EAAE;AAAb,iBARY,C;AAUd3B,gBAAAA,OAAO,CAACC,GAAR,CAAYsB,KAAZ;kDACOxB,GAAG,CAACiB,IAAJ,CAAS;AAAEE,kBAAAA,MAAM,EAAE,IAAV;AAAgBK,kBAAAA,KAAK,EAAEA;AAAvB,iBAAT,C;;;AAETxB,gBAAAA,GAAG,CAACiB,IAAJ,CAAS;AAAEG,kBAAAA,KAAK,EAAE;AAAT,iBAAT;;;AAEFpB,gBAAAA,GAAG,CAACiB,IAAJ,CAASI,qBAAqB,CAACD,KAA/B;;;;;;;;;;;;;;;;;;;4HAG0BrB,G,EAAKC,G;;;;;;;6BACHD,GAAG,CAACI,I,EAAxBG,K,cAAAA,K,EAAOE,Q,cAAAA,Q;;;;;;;;;;;;;;;;;;;;eAIJV,e","sourcesContent":["import Util from \"../utils/Util\"\nimport bcrypt from \"bcrypt\"\nimport jwt from \"jsonwebtoken\"\nimport LoginService from \"../services/LoginService\"\nimport { registerValidate, loginValidate } from \"../utils/validate\"\nimport user from \"../src/models/user\"\n\nconst util = new Util()\n\nclass LoginController {\n  static async register(req, res) {\n    console.log(req.body)\n    const { name, surname, email, password: cryptedPassword, roleId } = req.body\n    const reqFullBody = req.body\n    const isRegisterValidateResult = registerValidate(reqFullBody)\n\n    if (isRegisterValidateResult.res) {\n      const password = await bcrypt.hash(cryptedPassword, 10)\n      try {\n        const userRes = await LoginService.register(\n          name,\n          surname,\n          email,\n          password,\n          roleId\n        )\n\n        res.json(userRes._previousDataValues)\n      } catch (err) {\n        console.log(err)\n        return res.json({ status: \"error\" })\n      }\n    }\n    res.json(isRegisterValidateResult.error)\n  }\n\n  static async login(req, res) {\n    const { email, password } = req.body\n    const reqFullBody = req.body\n    const isLoginValidateResult = loginValidate(reqFullBody)\n    console.log(isLoginValidateResult.res)\n    if (isLoginValidateResult.res) {\n      const userRes = await LoginService.login(email)\n\n      if (!userRes) {\n        return res.json({ status: \"error\", error: \"user not found\" })\n      }\n      if (await bcrypt.compare(password, userRes.password)) {\n        const token = jwt.sign(\n          {\n            id: userRes.id,\n            name: userRes.name,\n            email: userRes.email,\n            roleId: userRes.roleId,\n          },\n          \"secret key\",\n          { expiresIn: 1000 }\n        )\n        console.log(token)\n        return res.json({ status: \"ok\", token: token })\n      }\n      res.json({ error: \"e-mail and password incorrect\" })\n    }\n    res.json(isLoginValidateResult.error)\n  }\n\n  static async changePassword(req, res) {\n    const { email, password } = req.body\n  }\n}\n\nexport default LoginController\n"],"file":"LoginController.js"}