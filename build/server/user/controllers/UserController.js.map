{"version":3,"sources":["../../../../api/server/user/controllers/UserController.js"],"names":["UserController","req","res","body","name","surname","email","cryptedPassword","password","roleId","isRemoved","reqFullBody","Helpers","isHaveUser","isRegisterValidateResult","type","bcrypt","hash","LoginService","register","userRes","json","data","_previousDataValues","console","log","message","error","send","isLoginValidateResult","login","status","compare","token","jwt","sign","id","encrypText","expiresIn","getAll","getAllResult","map","i"],"mappings":"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","sourcesContent":["import bcrypt from \"bcrypt\"\nimport jwt from \"jsonwebtoken\"\nimport LoginService from \"../services/UserService\"\nimport Helpers from \"../../utils/helpers\"\nimport { encrypText } from \"../../src/config/settings\"\nimport { registerValidate, loginValidate } from \"../../utils/validate\"\n\nclass UserController {\n  static async register(req, res) {\n    const {\n      name,\n      surname,\n      email,\n      password: cryptedPassword,\n      roleId = \"0\",\n      isRemoved = \"0\",\n    } = req.body\n    const reqFullBody = req.body\n    const isHaveUser = await Helpers.isHaveUser(email)\n\n    if (!isHaveUser) {\n      const isRegisterValidateResult = registerValidate(reqFullBody)\n\n      if (isRegisterValidateResult.type) {\n        const password = await bcrypt.hash(cryptedPassword, 10)\n\n        try {\n          const userRes = await LoginService.register(\n            name,\n            surname,\n            email,\n            password,\n            roleId,\n            isRemoved\n          )\n\n          res.json({ type: true, data: userRes._previousDataValues })\n        } catch (err) {\n          console.log(err)\n          return res.json({ type: false, message: err })\n        }\n      }\n      res.json(isRegisterValidateResult.error)\n    }\n    res.send({ type: false, message: \"email adresi kullanÄ±mda\" })\n  }\n\n  static async login(req, res) {\n    const { email, password } = req.body\n    const reqFullBody = req.body\n    const isLoginValidateResult = loginValidate(reqFullBody)\n    console.log(isLoginValidateResult.type)\n    if (isLoginValidateResult.type) {\n      const userRes = await LoginService.login(email)\n\n      if (!userRes) {\n        return res.json({ status: \"error\", error: \"user not found\" })\n      }\n      if (await bcrypt.compare(password, userRes.password)) {\n        const token = jwt.sign(\n          {\n            id: userRes.id,\n            name: userRes.name,\n            email: userRes.email,\n            roleId: userRes.roleId,\n            isRemoved: userRes.isRemoved,\n          },\n          encrypText,\n          { expiresIn: 1000 }\n        )\n        console.log(token)\n        return res.json({ type: true, token: token })\n      }\n      res.json({ error: \"e-mail and password incorrect\" })\n    }\n    res.json(isLoginValidateResult.error)\n  }\n\n  static async userGetAll(req, res) {\n    const getAllResult = await LoginService.getAll()\n    const data = getAllResult.map((i) => {\n      return {\n        id: i.id,\n        name: i.name,\n        surname: i.surname,\n        email: i.email,\n        roleId: i.roleId,\n      }\n    })\n    res.json(data)\n  }\n}\n\nexport default UserController\n"],"file":"UserController.js"}